// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(cuid())
  email          String         @unique
  firstName      String
  lastName       String
  userName       String         @unique
  password       String
  phonenumber    String?
  profilepicture String?
  description    String?
  roles          UserRole[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  books          Book[]
  videos         Video[]
  refreshTokens  RefreshToken[]
}

model Role {
  id    String     @id @default(cuid())
  name  String     @unique
  users UserRole[]
}

model UserRole {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  role   Role   @relation(fields: [roleId], references: [id])
  roleId String

  @@id([userId, roleId])
}

model Book {
  id           String        @id @default(cuid())
  title        String
  author       String
  description  String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  createdBy    User          @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById  String
  year         Year          @relation(fields: [yearId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  yearId       String
  course       Course        @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  courseId     String
  department   Department    @relation(fields: [departmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  departmentId String
  isApproved   Boolean       @default(false)
  tags         TagsOnBooks[] 
   
}

model Tag {
  id    String        @id @default(cuid())
  name  String        @unique
  Books TagsOnBooks[]  
}

model TagsOnBooks {
  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId String
  tag    Tag    @relation(fields: [tagId], references: [id],  onDelete: Cascade)
  tagId  String

  @@id([bookId, tagId])
}

model Course {
  id         String @id @unique @default(uuid())
  courseName String @unique
  books      Book[]
}

model Department {
  id             String @id @unique @default(uuid())
  departmentName String @unique
  books          Book[]
}

model Year {
  id   String @id @unique @default(uuid())
  year Int    @unique
  Book Book[]
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String
  userId      String
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Video {
  id          String   @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById String
  year        Int
  course      String
  department  String
  isApproved  Boolean  @default(false)
}
